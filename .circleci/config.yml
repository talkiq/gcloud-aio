version: 2.1

orbs:
  linter: talkiq/linter@3
  poetry: talkiq/poetry@4

executors:
  nox:
    docker:
      - image: thekevjames/nox:2022.11.21
    resource_class: small

  python-37:
    docker:
      - image: python:3.7.16
    resource_class: small

  python-38:
    docker:
      - image: python:3.8.16
    resource_class: small

  python-39:
    docker:
      - image: python:3.9.16
    resource_class: small

commands:
  store-rest:
    description: >
      Stores the files created by `bin/build-rest` for use in subsequent jobs.
      Also uploads the artifacts to CircleCI for manual debugging.
    steps:
      - persist_to_workspace:
          root: ./build
          paths:
          - ./*
      - run:
          name: build gcloud-rest tarballs
          command: |
            mkdir rest
            tar cf rest/auth.tgz auth
            tar cf rest/bigquery.tgz bigquery
            tar cf rest/datastore.tgz datastore
            tar cf rest/kms.tgz kms
            tar cf rest/pubsub.tgz pubsub
            tar cf rest/storage.tgz storage
            tar cf rest/taskqueue.tgz taskqueue
          working_directory: build
      - store_artifacts:
          path: ./build/rest/

jobs:
  # Since Poetry itself can only be installed in Python 3.7+ (but can target
  # venvs in older Pythons), we need to modify the default `poetry/run` job to
  # allow for target_python != runtime_python.
  # The below modifies `poetry/run` as follows:
  #
  # * modify base image to one which has the full matrix of required versions
  # * include `poetry env use` to set target_python != runtime_python
  # * `pip install` instead of `poetry install` the current package
  #
  #   * I have no idea why this fixed things, maybe a similar issue to
  #     https://github.com/python-poetry/poetry/issues/3410 ?
  poetry-run-deprecated-pythons:
    executor: nox
    parameters:
      cmd:
        type: string
      cwd:
        type: string
      python_version:
        type: string
    steps:
      - run: apt-get update -qy
      - run: apt-get install -qy python3.8-venv
      - poetry/install:
          # TODO: figure out a better way for managing older envs like py27...
          # ...or hopefully we can drop support before this affects us... more
          # than it already does...
          version: 1.1.9
      - checkout
      - run:
          command: poetry env use <<parameters.python_version>>
          working_directory: <<parameters.cwd>>
      - run:
          name: poetry install --no-root
          command: |
            # No idea why we need to re-lock here (even if we just locked!),
            # but it's py2.7 so meh, who cares.
            [ "v2.7" = "v<<parameters.python_version>>" ] && poetry lock
            poetry install --no-root
          working_directory: <<parameters.cwd>>
      - run:
          command: poetry run pip install .
          working_directory: <<parameters.cwd>>
      - run:
          command: poetry run <<parameters.cmd>>
          working_directory: <<parameters.cwd>>

  # Inspired by poetry/publish, the addition of `basedir` is meant to support
  # gcloud-rest builds in a matrix (eg. without having `cwd` be a complicated
  # path which breaks the tag filter).
  poetry-publish-workspace:
    executor: python-39
    parameters:
      basedir:
        enum: [/rest, /root/project]
        type: enum
      cwd:
        type: string
    steps:
      - poetry/install
      - checkout
      - attach_workspace:
          at: /rest
      - run:
          command: |
            suffix=$(if [ <<parameters.basedir>> = "/rest" ]; then echo "REST"; else echo "AIO"; fi)
            token=$(printenv | grep -i PYPI_TOKEN_GCLOUD_$(echo $suffix)_<<parameters.cwd>> | awk -F= '{ print $2 }')
            echo "export POETRY_PYPI_TOKEN_PYPI=$token" >> "$BASH_ENV"
          working_directory: <<parameters.basedir>>/<<parameters.cwd>>
      - run:
          command: poetry build
          working_directory: <<parameters.basedir>>/<<parameters.cwd>>
      - run:
          command: poetry publish
          working_directory: <<parameters.basedir>>/<<parameters.cwd>>

  docs:
    executor: python-39
    steps:
      - run: pip install pdoc
      - checkout
      - attach_workspace:
          at: rest
      - run:
          name: install all sub-projects (aio)
          command: |
            pip install -e ./auth
            pip install -e ./bigquery
            pip install -e ./datastore
            pip install -e ./kms
            pip install -e ./pubsub
            pip install -e ./storage
            pip install -e ./taskqueue
      - run:
          name: install all sub-projects (rest)
          command: |
            cd rest/
            pip install -e ./auth
            pip install -e ./bigquery
            pip install -e ./datastore
            pip install -e ./kms
            pip install -e ./pubsub
            pip install -e ./storage
            pip install -e ./taskqueue
      - run: mkdir -p ./build
      - run: pdoc -o ./build/docs gcloud
      - persist_to_workspace:
          root: ./build
          paths:
          - ./docs

  pages:
    docker:
      - image: node:19.5.0
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: npm install -g --silent gh-pages@2.0.1
      - run:
          name: configure git creds
          command: |
            git config user.email "voiceai-eng+ci@dialpad.com"
            git config user.name "Vi Eng (CI)"
      - add_ssh_keys:
          fingerprints:
            - "f6:b5:5d:10:ed:5d:cd:e0:83:28:dd:39:8c:f8:0b:c3"
      - run: gh-pages --message "[skip ci] updated docs" --dist build/docs

  github:
    docker:
      - image: debian:buster-slim
    steps:
      - run: apt update -qy
      - run: apt install -qy hub git
      - checkout
      - run:
          name: create changelog
          command: |
            export PROJECT=$(echo "${CIRCLE_TAG}" | sed 's/-.*//')
            export PREV_RELEASE=$(git tag --sort=version:refname | grep ${PROJECT} | tail -n2 | head -n1)
            [ "${PREV_RELEASE}" = "${CIRCLE_TAG}" ] && export PREV_RELEASE=$(git rev-list --max-parents=0 HEAD)
            [ -z "${PREV_RELEASE}" ] && export PREV_RELEASE=$(git rev-list --max-parents=0 HEAD)

            echo "${CIRCLE_TAG}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log ${PREV_RELEASE}..${CIRCLE_TAG} --pretty=format:'- %s' | grep "${PROJECT}" >> CHANGELOG.md ||:
      - run: hub release create -FCHANGELOG.md "${CIRCLE_TAG}"

workflows:
  run-jobs:
    jobs:
      # build gcloud-rest-*
      - poetry/run:
          name: build-rest
          commands:
            - run: poetry run ./bin/build-rest
          post-steps:
            - store-rest
          filters:
            tags:
              only: /.*/

      # run linters
      - linter/pre-commit:
          # N.B. keep this pinned to the oldest 3.x to make sure we maintain
          # support.
          executor: python-37
          filters:
            tags:
              only: /.*/

      # run tests
      - poetry-run-deprecated-pythons:
          name: test-unit-/aio/<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/unit
          matrix:
            alias: test-unit-aio
            parameters:
              cwd: [auth, bigquery, datastore, kms, pubsub, storage, taskqueue]
              python_version: ['3.7', '3.8', '3.9']
          filters:
            tags:
              only: /.*/
      - poetry-run-deprecated-pythons:
          name: test-integration-/aio/<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/integration
          pre-steps:
            - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/key.json"' >> $BASH_ENV
            - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
          matrix:
            alias: test-integration-aio
            parameters:
              cwd: [auth, bigquery, datastore, pubsub, storage, taskqueue]
              python_version: ['3.9']
          filters:
            tags:
              only: /.*/
      - poetry-run-deprecated-pythons:
          name: test-unit-<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/unit
          pre-steps:
            - attach_workspace:
                at: /rest
          matrix:
            alias: test-unit-rest
            parameters:
              cwd: [/rest/auth, /rest/bigquery, /rest/datastore, /rest/kms, /rest/pubsub, /rest/storage, /rest/taskqueue]
              python_version: ['2.7', '3.7', '3.8', '3.9']
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - poetry-run-deprecated-pythons:
          name: test-integration-<<matrix.cwd>>-<<matrix.python_version>>
          cmd: pytest tests/integration
          pre-steps:
            - run: echo 'export GOOGLE_APPLICATION_CREDENTIALS="/key.json"' >> $BASH_ENV
            - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
            - attach_workspace:
                at: /rest
          matrix:
            alias: test-integration-rest
            parameters:
              cwd: [/rest/auth, /rest/bigquery, /rest/datastore, /rest/pubsub, /rest/storage, /rest/taskqueue]
              python_version: ['2.7', '3.9']
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest

      # build docs
      - docs:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/
          requires:
            - build-rest
      - pages:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/
          requires:
            - docs

      # create github & pypi release
      - github:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-.*/
          requires:
            - linter/pre-commit
            - test-unit-aio
            - test-integration-aio
            - test-unit-rest
            - test-integration-rest
      - hold:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-.*/
          requires:
           - github
      - poetry-publish-workspace:
          name: deploy-<<matrix.basedir>>-<<matrix.cwd>>
          matrix:
            parameters:
              cwd: [auth, bigquery, datastore, kms, pubsub, storage, taskqueue]
              basedir: [/rest, /root/project]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /<<matrix.cwd>>-.*/
          requires:
            - hold
