version: 2.1

orbs:
  linter: talkiq/linter@1
  tester: talkiq/tester@1.2

jobs:
  lint-rest:
    docker:
      - image: python:2.7.18
    steps:
      - attach_workspace:
          at: rest
      - run:
          command: |
            cd rest/
            git init && git add -A
            pip install pre-commit
            pre-commit run --all-files -c .pre-commit-config.rest.yaml

  nox:
    docker:
      - image: thekevjames/nox:2019.11.9
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /key.json
    parameters:
      folder:
        type: string
    steps:
      - run: |
          apt-get -qy update
          apt-get -qy install libssl-dev
      - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
      - checkout
      - run: nox -f <<parameters.folder>>/noxfile.py

  nox-rest:
    docker:
      - image: thekevjames/nox:2019.11.9
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /key.json
    parameters:
      folder:
        type: string
    steps:
      - run: echo ${GOOGLE_SERVICE_PUBLIC} | base64 -d > ${GOOGLE_APPLICATION_CREDENTIALS}
      - attach_workspace:
          at: rest
      - run: python3 -m pip install future==0.17.1
      - run: nox -f rest/<<parameters.folder>>/noxfile.py

  docs:
    docker:
      - image: python:3.8.3
    steps:
      - run: pip install pdoc3
      - run:
          name: patch pdoc
          command: |
            sed -i -re 's/(at 0x\\.*)$/\1\n            else:\n                from enum import Enum\n                if isinstance(p.default, Enum):\n                    replacement = str(p.default)/' /usr/local/lib/python3.8/site-packages/pdoc/__init__.py
      - checkout
      - attach_workspace:
          at: rest
      - run:
          name: install all sub-projects (aio)
          command: |
            pip install ./auth
            pip install ./bigquery
            pip install ./datastore
            pip install ./kms
            pip install ./pubsub
            pip install ./storage
            pip install ./taskqueue
      - run:
          name: install all sub-projects (rest)
          command: |
            cd rest/
            pip install ./auth
            pip install ./bigquery
            pip install ./datastore
            pip install ./kms
            pip install ./storage
            pip install ./taskqueue
      - run: pdoc --html -o ./docs gcloud
      - persist_to_workspace:
          root: docs
          paths: gcloud

  pages:
    docker:
      - image: node:8.17.0
    steps:
      - checkout
      - attach_workspace:
          at: docs
      - run: npm install -g --silent gh-pages@2.0.1
      - run:
          name: configure git creds
          command: |
            git config user.email "voiceai-eng+ci@dialpad.com"
            git config user.name "Vi Eng (CI)"
      - add_ssh_keys:
          fingerprints:
            - "f6:b5:5d:10:ed:5d:cd:e0:83:28:dd:39:8c:f8:0b:c3"
      - run: gh-pages --message "[skip ci] updated docs" --dist docs/gcloud

  pypi:
    docker:
      - image: python:3.8.3-slim
    steps:
      - run: pip install pyopenssl==19.0.0 twine==1.14.0
      - checkout
      - deploy:
          name: upload to pypi
          command: |
            cd "${CIRCLE_TAG%-*}"
            python setup.py sdist bdist_wheel
            twine upload dist/*

  pypi-rest:
    docker:
      - image: python:3.8.3-slim
    steps:
      - run: pip install future==0.17.1 pyopenssl==19.0.0 twine==1.14.0
      - attach_workspace:
          at: rest
      - deploy:
          name: upload to pypi
          command: |
            cd "rest/${CIRCLE_TAG%-*}"
            python setup.py sdist bdist_wheel
            twine upload dist/*

  github:
    docker:
      - image: debian:buster-slim
    steps:
      - run: apt update -qy
      - run: apt install -qy hub git
      - checkout
      - run:
          name: create changelog
          command: |
            export PROJECT=$(echo "${CIRCLE_TAG}" | sed 's/-.*//')
            export PREV_RELEASE=$(git tag --sort=version:refname | grep ${PROJECT} | tail -n2 | head -n1)
            [ "${PREV_RELEASE}" = "${CIRCLE_TAG}" ] && export PREV_RELEASE=$(git rev-list --max-parents=0 HEAD)
            [ -z "${PREV_RELEASE}" ] && export PREV_RELEASE=$(git rev-list --max-parents=0 HEAD)

            echo "${CIRCLE_TAG}" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log ${PREV_RELEASE}..${CIRCLE_TAG} --pretty=format:'- %s' | grep "${PROJECT}" >> CHANGELOG.md
      - run: hub release create -FCHANGELOG.md "${CIRCLE_TAG}"

  py3to2:
    docker:
      - image: python:3.8.3-slim
    steps:
      - checkout
      - run: pip install -r requirements.txt

      # Remove pubsub, its just an aio shim
      - run: rm -r ./pubsub

      # Remove caches and config directories
      - run: find . -exec dirname {} \; | sort -u | grep -E '/\..*' | xargs -L1 rm -rf

      # Rename files and paths to `rest` and make strings py2 compatible
      - run: find . -path '*aio*' -exec dirname {} \; | sed 's/aio/rest/g' | xargs -L1 mkdir -p
      - run: for file in $(find . -type f -path '*aio*'); do mv $file ${file//aio/rest}; done

      # For some files with conflicts due to unicode encoding in py2, do not use
      # the automated string conversion tools
      - run: for file in $(find . -type f -path '*py' | grep -E "datastore.*(value|constants|value_types_test|value_test)\.py$" | sort -u); do new_file=${file//aio/rest}; temp_file="${new_file}.bkp"; cp $file $temp_file; strip-hints $temp_file > "${temp_file}.tmp"; mv "${temp_file}.tmp" $new_file; rm $temp_file; echo "Skipped formatting ${new_file}"; done
      - run: for file in $(find . -type f -path '*py' | grep -Ev "datastore.*(value|constants|value_types_test|value_test)\.py$" | sort -u); do new_file=${file//aio/rest}; temp_file="${new_file}.bkp"; future-fstrings-show $file > $temp_file; strip-hints $temp_file > "${temp_file}.tmp"; mv "${temp_file}.tmp" $new_file; rm $temp_file; echo "Formatting ${new_file}"; done

      # Remove the files with `aio` in file names (we moved all required files
      # already)
      - run: find . -type f -path '*aio*' | xargs -L1 rm -rf

      # Replace build metadata
      - run: find . -type f | xargs -L1 sed -Ei 's/gcloud(.)aio/gcloud\1rest/g'
      - run: find . -type f | grep "setup\.py$" | xargs -L1 sed -Ei "s/python_requires='>= 3\.6'/python_requires='>= 2\.7,!=3\.0\.\*,!=3\.1\.\*,!=3\.2\.\*,!=3\.3\.\*'/g"
      - run: >-
          find . -type f | grep "setup\.py$" | xargs -L1 sed -Ei "s/classifiers=\[/classifiers=\['Programming Language :: Python :: 2','Programming Language :: Python :: 2.7','Programming Language :: Python :: 3.4','Programming Language :: Python :: 3.5',/g"

      # Backport other things like type hints, exception handling, etc.
      - run: find . -type f -path '*py' | grep -Ev "datastore.*(value|constants|value_types_test|value_test)\.py$" | xargs -L1 pasteurize --nobackups --write

      # Add object class inheritence where needed for python2
      - run: find . -type f -path '*py' | xargs -L1 sed -Ei 's/(class\s\w+):/\1(object):/g'

      # Physically update files to remove incompatible syntax
      - run: find . -type f -path '*requirements.txt' | xargs -L1 sed -Ei 's/aiohttp/# aiohttp/g'
      - run: find . -type f -path '*requirements.txt' | xargs -L1 sed -Ei 's/# requests/requests/g'
      - run: find . -type f | grep -v "session.py" | xargs -L1 sed -Ei 's/AioSession/SyncSession/g'
      - run: find . -type f | xargs -L1 sed -Ei 's/asyncio.ensure_future(.*)/\1/g'
      - run: find . -type f -path '*py' | xargs -L1 sed -Ei 's/(async|await) //g'
      - run: find . -type f -path '*tests/*' | xargs -L1 sed -Ei 's/@pytest.mark.asyncio/#@pytest.mark.asyncio/g'
      - run: find . -type f -path '*tests/*' | xargs -L1 sed -Ei 's/Session\(.*\)\sas/Session() as/g'
      - run: find . -type f -path '*py' | xargs -L1 sed -Ei 's/urllib/six.moves.urllib/g'
      - run: find . -type f -path '*py' | xargs -L1 sed -Ei 's/__aenter__/__enter__/g'
      - run: find . -type f -path '*py' | xargs -L1 sed -Ei 's/__aexit__/__exit__/g'

      # Update the nox files
      - run: find . -type f -path '*noxfile.py' | xargs -L1 sed -Ei "s/'aiohttp',//g"
      - run: find . -type f -path '*noxfile.py' | xargs -L1 sed -Ei "s/,\s*'pytest-asyncio'//g"
      ## unit tests
      - run: find . -type f -path '*noxfile.py' | xargs -L1 sed -Ei "s/python=\['3.6'/python=\['2.7', '3.5', '3.6'/g"
      ## integration tests
      - run: find . -type f -path '*noxfile.py' | xargs -L1 sed -Ei "s/python=\['3.8'/python=\['2.7', '3.8'/g"

      # Persist updated files in a workspace for tests & package deployment
      - persist_to_workspace:
          root: .
          paths:
          - ./*

workflows:
  run-jobs:
    jobs:
      # build `-aio-*` -> `-rest-*`
      - py3to2:
          name: build-rest
          filters:
            tags:
              only: /.*/

      - linter/pre-commit:
          python_version: 3.6.6
          filters:
            tags:
              only: /.*/
      - lint-rest:
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest

      - tester/pipcheck:
          name: pipcheck-auth
          install_args: auth/
          python_version: 3.6.6
      - tester/pipcheck:
          name: pipcheck-bigquery
          install_args: bigquery/
          python_version: 3.6.6
      - tester/pipcheck:
          name: pipcheck-datastore
          install_args: datastore/
          python_version: 3.6.6
      - tester/pipcheck:
          name: pipcheck-kms
          install_args: kms/
          python_version: 3.6.6
      - tester/pipcheck:
          name: pipcheck-pubsub
          install_args: pubsub/
          python_version: 3.6.6
      - tester/pipcheck:
          name: pipcheck-storage
          install_args: storage/
          python_version: 3.6.6
      - tester/pipcheck:
          name: pipcheck-taskqueue
          install_args: taskqueue/
          python_version: 3.6.6

      # build docs
      - docs:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/
          requires:
            - build-rest
      - pages:
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/
          requires:
            - docs

      # test `-aio-*`
      - nox:
          name: test-auth
          folder: auth
          filters:
            tags:
              only: /.*/
      - nox:
          name: test-bigquery
          folder: bigquery
          filters:
            tags:
              only: /.*/
      - nox:
          name: test-datastore
          folder: datastore
          filters:
            tags:
              only: /.*/
      - nox:
          name: test-kms
          folder: kms
          filters:
            tags:
              only: /.*/
      - nox:
          name: test-pubsub
          folder: pubsub
          filters:
            tags:
              only: /.*/
      - nox:
          name: test-storage
          folder: storage
          filters:
            tags:
              only: /.*/
      - nox:
          name: test-taskqueue
          folder: taskqueue
          filters:
            tags:
              only: /.*/

      # test `-rest-*`
      - nox-rest:
          name: test-rest-auth
          folder: auth
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - nox-rest:
          name: test-rest-bigquery
          folder: bigquery
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - nox-rest:
          name: test-rest-datastore
          folder: datastore
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - nox-rest:
          name: test-rest-kms
          folder: kms
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - nox-rest:
          name: test-rest-storage
          folder: storage
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest
      - nox-rest:
          name: test-rest-taskqueue
          folder: taskqueue
          filters:
            tags:
              only: /.*/
          requires:
            - build-rest

      - github:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
            - linter/pre-commit
            - lint-rest
            - pipcheck-auth
            - pipcheck-bigquery
            - pipcheck-datastore
            - pipcheck-kms
            - pipcheck-pubsub
            - pipcheck-storage
            - pipcheck-taskqueue
            - test-auth
            - test-bigquery
            - test-datastore
            - test-kms
            - test-pubsub
            - test-storage
            - test-taskqueue
            - test-rest-auth
            - test-rest-bigquery
            - test-rest-datastore
            - test-rest-kms
            - test-rest-storage
            - test-rest-taskqueue

      - hold:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
           - github

      - pypi:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
          requires:
            - hold
      - pypi-rest:
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /[a-z]+-[0-9]+\.[0-9]+\.[0-9]+/
              ignore: /pubsub-*/
          requires:
            - hold
