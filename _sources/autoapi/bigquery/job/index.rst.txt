:py:mod:`bigquery.job`
======================

.. py:module:: bigquery.job


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bigquery.job.Job




.. py:class:: Job(job_id = None, project = None, service_file = None, session = None, token = None, api_root = None, location = None)


   Bases: :py:obj:`bigquery.bigquery.BigqueryBase`

   .. py:method:: _make_query_body(query, write_disposition, use_query_cache, dry_run, use_legacy_sql, destination_table)
      :staticmethod:


   .. py:method:: _config_params(params = None)


   .. py:method:: get_job(session = None, timeout = 60)
      :async:

      Get the specified job resource by job ID.


   .. py:method:: get_query_results(session = None, timeout = 60, params = None)
      :async:

      Get the specified jobQueryResults by job ID.


   .. py:method:: cancel(session = None, timeout = 60)
      :async:

      Cancel the specified job by job ID.


   .. py:method:: query(query_request, session = None, timeout = 60)
      :async:

      Runs a query synchronously and returns query results if completes
      within a specified timeout.


   .. py:method:: insert(job, session = None, timeout = 60)
      :async:

      Insert a new asynchronous job.


   .. py:method:: insert_via_query(query, session = None, write_disposition = Disposition.WRITE_EMPTY, timeout = 60, use_query_cache = True, dry_run = False, use_legacy_sql = True, destination_table = None)
      :async:

      Create table as a result of the query


   .. py:method:: result(session = None)
      :async:


   .. py:method:: delete(session = None, job_id = None, timeout = 60)
      :async:

      Delete the specified job by job ID.



