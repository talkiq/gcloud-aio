datastore.datastore
===================

.. py:module:: datastore.datastore


Attributes
----------

.. autoapisummary::

   datastore.datastore.SCOPES
   datastore.datastore.log
   datastore.datastore.LookUpResult


Classes
-------

.. autoapisummary::

   datastore.datastore.Datastore


Functions
---------

.. autoapisummary::

   datastore.datastore.init_api_root


Module Contents
---------------

.. py:data:: SCOPES
   :value: ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore']


.. py:data:: log

.. py:data:: LookUpResult

.. py:function:: init_api_root(api_root)

.. py:class:: Datastore(project = None, service_file = None, namespace = '', session = None, token = None, api_root = None)

   .. py:attribute:: datastore_operation_kind


   .. py:attribute:: entity_result_kind


   .. py:attribute:: key_kind


   .. py:attribute:: mutation_result_kind


   .. py:attribute:: query_result_batch_kind


   .. py:attribute:: query_result_kind


   .. py:attribute:: value_kind


   .. py:attribute:: _project
      :type:  Optional[str]


   .. py:attribute:: _api_root
      :type:  str


   .. py:attribute:: _api_is_dev
      :type:  bool


   .. py:attribute:: namespace
      :value: ''



   .. py:attribute:: session


   .. py:attribute:: token


   .. py:method:: project()
      :async:



   .. py:method:: _make_commit_body(mutations, transaction = None, mode = Mode.TRANSACTIONAL)
      :staticmethod:



   .. py:method:: headers()
      :async:



   .. py:method:: make_mutation(operation, key, properties = None)
      :classmethod:



   .. py:method:: allocateIds(keys, session = None, timeout = 10.0)
      :async:



   .. py:method:: beginTransaction(session = None, timeout = 10.0)
      :async:



   .. py:method:: commit(mutations, transaction = None, mode = Mode.TRANSACTIONAL, session = None, timeout = 10.0)
      :async:



   .. py:method:: export(output_bucket_prefix, kinds = None, namespaces = None, labels = None, session = None, timeout = 10.0)
      :async:



   .. py:method:: get_datastore_operation(name, session = None, timeout = 10.0)
      :async:



   .. py:method:: lookup(keys, transaction = None, newTransaction = None, consistency = Consistency.STRONG, read_time = None, session = None, timeout = 10.0)
      :async:



   .. py:method:: _build_lookup_result(data)


   .. py:method:: _build_read_options(consistency, newTransaction, transaction, read_time)


   .. py:method:: reserveIds(keys, database_id = '', session = None, timeout = 10.0)
      :async:



   .. py:method:: rollback(transaction, session = None, timeout = 10.0)
      :async:



   .. py:method:: runQuery(query, explain_options = None, transaction = None, newTransaction = None, consistency = Consistency.EVENTUAL, read_time = None, session = None, timeout = 10.0)
      :async:



   .. py:method:: delete(key, session = None)
      :async:



   .. py:method:: insert(key, properties, session = None)
      :async:



   .. py:method:: update(key, properties, session = None)
      :async:



   .. py:method:: upsert(key, properties, session = None)
      :async:



   .. py:method:: operate(operation, key, properties = None, session = None)
      :async:



   .. py:method:: close()
      :async:



   .. py:method:: __aenter__()
      :async:



   .. py:method:: __aexit__(*args)
      :async:



